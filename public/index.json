[{"content":"WSL2编译AOSP笔记 学了这么久，虽然是已经非常熟练的操作，但还是需要记录一下\u0026hellip;\n为什么选择WSL2，不选择VMWare，因为VMWare占用的资源太大了，WSL2对比下来，发现轻松很多。而且也方便用AS等软件直接打开源码。\n相关概念 WSL2，Windows Subsystem for Linux，Windows操作系统上的一个功能，用来允许在Windows运行Linux环境； AOSP，额看这篇笔记的应该都懂，Android Open Source Project， 主要指Android开源代码； 步骤 WSL2安装和初始化 安装 以 管理员身份 打开 PowerShell。\n方法：在开始菜单搜索 \u0026ldquo;PowerShell\u0026rdquo;，右键点击，选择“以管理员身份运行”。 在 PowerShell 窗口中，输入以下命令并回车：\nPowerShell\nwsl --install 这条命令会自动帮你完成以下所有事情：\n开启 “虚拟机平台” 功能。 开启 “适用于 Linux 的 Windows 子系统” 功能。 下载并安装 最新版的 Linux 内核。 设置 WSL2 为默认版本。 从微软商店下载并安装 最新版的 Ubuntu 发行版。 命令运行完毕后，重启电脑。\nUbuntu初始化 搜索打开Ubuntu，或者在Terminal选项中打开； 第一次启动会提示：\u0026ldquo;Installing, this may take a few minutes\u0026hellip;\u0026quot;； 安装完成后，创建初始账号和密码； 验证WSL版本 打开PowerShell，输入以下 wsl -l -v 你会看到类似输出： NAME STATE VERSION * Ubuntu Running 2 如果 VERSION 列显示为 2，说明一切正常，你已经成功用上了 WSL2。\n【转换操作】 如果 VERSION 列显示为 1，说明这是一个 WSL1 的旧实例，你需要手动将其转换为 WSL2。执行以下命令即可：\nPowerShell\n# 把 \u0026#34;Ubuntu\u0026#34; 替换成你列表中显示的名字 wsl --set-version Ubuntu 2 等待转换完成后，你的 Ubuntu 就成功升级到 WSL2 了。\nAOSP下载和编译 参考官网：Try Android development | Android Open Source Project\n安装所需软件 sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev libc6-dev-i386 x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig 注意一下，需要每个都安装成功\n安装repo 安装repo有2种方式，一种是直接sudo apt install repo，但是一般这样安装，repo的版本都比较低，我一般通过源码进行安装；\nexport REPO=$(mktemp /tmp/repo.XXXXXXXXX) curl -o ${REPO} https://storage.googleapis.com/git-repo-downloads/repo gpg --recv-keys 8BB9AD793E8E6153AF0F9A4416530D5E920F5C65 curl -s https://storage.googleapis.com/git-repo-downloads/repo.asc | gpg --verify - ${REPO} \u0026amp;\u0026amp; install -m 755 ${REPO} ~/bin/repo 查看repo版本\nrepo version 下载源码 repo init --partial-clone -b android-latest-release -u https://android.googlesource.com/platform/manifest # 这里是android新出的manifest名称，用android-latest-release替代main，来代表最新的释放版本； # 也可以通过AOSP官网查看其他manifest分支 # --partial-clone 这个选项是Android用来替代--depth=1选项的，这个会智能地下载历史记录，但不会立马下载一些非必要的文件，只有在真正下载用到的时候才会进行下载源码 repo sync -c --no-tags --prune -j16 编译源码 source build/envsetup.sh lunch \u0026lt;COMBO\u0026gt; # COMBO一般我编译sdk_car_x86_64-aosp_current-eng m -j32 # -j是线程数，看你自己的CPU来确定，如果线程数太高，可能会编译失败，甚至ninja由于线程数过高直接被kill掉，这种情况连报错都不会显示 启动 emulator即可。需要注意，如果只是输入emulator，它会根据环境变量去找对应的镜像，需要先source envsetup.sh和lunch；\nemulator ","permalink":"http://localhost:1313/posts/wls2%E7%BC%96%E8%AF%91aosp%E7%AC%94%E8%AE%B0/","summary":"WSL2编译AOSP的笔记","title":"WLS2编译AOSP笔记"},{"content":"WEEK 39 周报 Android 搭建WSL2 + Ubuntu； 完成编译AOSP，版本为android15； ","permalink":"http://localhost:1313/posts/weekly/2025-week-39/","summary":"第39周周报","title":"2025 Week 39"},{"content":"WEEK 38 周报 博客搭建 BLOG搭建 Github Pages + Hugo 初始化 PaperMod主题配置 首页、归档、搜索、TAG等功能配置 ","permalink":"http://localhost:1313/posts/weekly/2025-week-38/","summary":"第38周周报","title":"2025 Week 38"},{"content":"技术栈：Hugo + Git + GitHub Pages + GitHub Actions\n主题：PaperMod Theme\n初始化Github Pages和Hugo 创建仓库 仓库名字一定要按照\u0026lt;UserName\u0026gt;.github.io创建 克隆仓库 git clone \u0026lt;仓库地址\u0026gt; git clone https://github.com/MaxJ-L/MaxJ-L.github.io.git hugo安装 进入Releases · gohugoio/hugo hugo官方Github网址，通过release下载对应系统的执行文件； 将hugo配置为环境变量； hugo初始化 使用以下命令在当前目录进行初始化\n一般其实采用hugo new site 进行初始化\n但是实际操作发现以下冲突：\ngit clone会自动创建文件夹； hugo new site 会自动创建BLOG NAME的文件夹； 以上这两个文件夹会冲突（clone不允许同名文件夹、如果不在根目录new site，会导致无法正常现实）\n当然其实这些问题肯定可以通过配置其他文件进行规避的，但是修改和熟悉成本就高很多了\nhugo new site . --force 初始化之后，会出现以下目录\nMaxJ-L.github.io.git ├─archetypes // 内容模板文件夹。运行 `hugo new` 时，会使用这里的模板来创建新文件 │ default.md // 内容“模板”，运行 `hugo new` 时会基于此文件创建新文章的结构。 ├─assets // 资源文件夹。存放需要 Hugo 处理的文件，如 SCSS、需要压缩的 JS 等 ├─content // 内容文件夹。你所有的博客文章、页面等 .md 文件都存放在这里，是网站的核心 ├─data // 数据文件夹。存放 JSON, YAML, TOML 等格式的数据文件，供模板调用。 ├─i18n // 国际化文件夹。用于存放多语言网站的翻译字符串。 ├─layouts // 布局文件夹。用于存放自定义的 HTML 模板，可以覆盖主题的默认布局。 ├─public // 输出文件夹。运行 `hugo` 命令后，生成的完整静态网站会放在这里。这是最终部署的“成品”。 ├─static // 静态文件夹。存放无需处理的文件，如图片、CSS、字体等。会原样复制到最终网站。 └─themes // 主题文件夹。存放你下载的网站主题，比如 PaperMod。 hugo.toml // 网站的“大脑”，最重要的全局配置文件，包含网址、主题、菜单等所有设置。 主题安装与核心配置 主题安装 Hugo Themes网站上面有许多主题，可以自行跳转主题进行下载；\n我选择的是PaperMod，进入对应的Github地址adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme.\n根据Installation · adityatelange/hugo-PaperMod Wiki上面对应的安装方法； 我使用推荐的方法2进行安装 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --remote --merge 核心配置 hugo.toml baseURL = \u0026#34;https://MaxJ-L.github.io/\u0026#34; ## 这里是你的仓库Github Pages地址 languageCode = \u0026#39;zh-CN\u0026#39; ## 这里配置成对应的语言 theme = \u0026#39;PaperMod\u0026#39; ## 这里配置成你选中的主题，我这里选择了PaperMod title = \u0026#39;The MaxJ-L Stack\u0026#39; ## 这里是BLOG的标题 [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] # -- 导航栏菜单配置 -- # 导航栏需要显式配置归档、搜索和标签，才可以显示。如果不配置，打开之后只显示主页 [[menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;归档\u0026#34; url = \u0026#34;/archives/\u0026#34; # 链接到我们刚刚创建的 archives.md weight = 10 # 权重，数字越小越靠前 [[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;搜索\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 20 [[menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 30 在content下面创建archives.md和search.md，然后补充内容 --- title: \u0026#34;Archives\u0026#34; layout: \u0026#34;archives\u0026#34; # archives.md` # 不要改动这个文件的其他内容 --- --- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; # search.md # 不要改动这个文件的其他内容 --- Hugo 本地调试 hugo server 如果显示如下，则说明没有错误，打开 http://localhost:1313/ 即可；\n如果有语法错误，会有提示；\n│ EN ─────────┼── Pages │ 13 Paginator pages │ 0 Non-page files │ 0 Static files │ 0 Processed images │ 0 Aliases │ 2 Cleaned │ 0 Built in 230 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop PUSH到远程仓库并且实现CI/CD自动化部署 目的是实现PUSH的时候自动触发deploy部署\npush到远程仓库 git add . git commit -m \u0026#34;First Add\u0026#34; git push origin main Github Actions自动化部署 方案1 手动创建文件 根目录手动创建文件.github/workflows/hugo.yml 填充以下内容 # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.150.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 方案2 页面配置 进入仓库页面，依次点击Actions、New workflow进入选择workflow页面； workflow页面搜索hugo，点击Configure； 显示以下页面，修改内容，然后点击Commit changes... 这里有个坑：ParperMod对hugo版本号有要求\nhugo v0.146.0 or greater is required for hugo-PaperMod to build\n因此模板那里需要修改一下版本号\n感谢 如何用 GitHub Pages + Hugo 搭建个人博客 · KrislinBlog\n","permalink":"http://localhost:1313/posts/githubpages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/","summary":"Hugo + GitHub Pages 博客搭建全攻略：从入门到自动化部署（含踩坑笔记）","title":"GithubPages搭建个人博客教程"}]